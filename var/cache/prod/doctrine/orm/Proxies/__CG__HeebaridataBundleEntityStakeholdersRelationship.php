<?php

namespace Proxies\__CG__\Heebari\dataBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class StakeholdersRelationship extends \Heebari\dataBundle\Entity\StakeholdersRelationship implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'idContainer', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'typeContainer', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'pourcentage', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'startedDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'endedDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'idCompany'];
        }

        return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'idContainer', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'typeContainer', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'pourcentage', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'startedDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'endedDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\StakeholdersRelationship' . "\0" . 'idCompany'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (StakeholdersRelationship $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setIdContainer($idContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdContainer', [$idContainer]);

        return parent::setIdContainer($idContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdContainer()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdContainer();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdContainer', []);

        return parent::getIdContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeContainer($typeContainer)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeContainer', [$typeContainer]);

        return parent::setTypeContainer($typeContainer);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeContainer()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeContainer', []);

        return parent::getTypeContainer();
    }

    /**
     * {@inheritDoc}
     */
    public function setPourcentage($pourcentage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPourcentage', [$pourcentage]);

        return parent::setPourcentage($pourcentage);
    }

    /**
     * {@inheritDoc}
     */
    public function getPourcentage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPourcentage', []);

        return parent::getPourcentage();
    }

    /**
     * {@inheritDoc}
     */
    public function setStartedDate($startedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStartedDate', [$startedDate]);

        return parent::setStartedDate($startedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStartedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStartedDate', []);

        return parent::getStartedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setEndedDate($endedDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEndedDate', [$endedDate]);

        return parent::setEndedDate($endedDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getEndedDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEndedDate', []);

        return parent::getEndedDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdCompany(\Heebari\dataBundle\Entity\Company $idCompany)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdCompany', [$idCompany]);

        return parent::setIdCompany($idCompany);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdCompany', []);

        return parent::getIdCompany();
    }

}
