<?php

namespace Proxies\__CG__\Heebari\dataBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class BalanceSheet extends \Heebari\dataBundle\Entity\BalanceSheet implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idBalanceSheet', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'sheetDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'elementType', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'amount', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idElement', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idCompany'];
        }

        return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idBalanceSheet', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'sheetDate', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'elementType', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'amount', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idElement', '' . "\0" . 'Heebari\\dataBundle\\Entity\\BalanceSheet' . "\0" . 'idCompany'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (BalanceSheet $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdBalanceSheet()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdBalanceSheet();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdBalanceSheet', []);

        return parent::getIdBalanceSheet();
    }

    /**
     * {@inheritDoc}
     */
    public function setSheetDate($sheetDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSheetDate', [$sheetDate]);

        return parent::setSheetDate($sheetDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getSheetDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSheetDate', []);

        return parent::getSheetDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setElementType($elementType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setElementType', [$elementType]);

        return parent::setElementType($elementType);
    }

    /**
     * {@inheritDoc}
     */
    public function getElementType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getElementType', []);

        return parent::getElementType();
    }

    /**
     * {@inheritDoc}
     */
    public function setAmount($amount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAmount', [$amount]);

        return parent::setAmount($amount);
    }

    /**
     * {@inheritDoc}
     */
    public function getAmount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAmount', []);

        return parent::getAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdElement(\Heebari\dataBundle\Entity\BalanceElements $idElement = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdElement', [$idElement]);

        return parent::setIdElement($idElement);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdElement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdElement', []);

        return parent::getIdElement();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdCompany(\Heebari\dataBundle\Entity\Company $idCompany = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdCompany', [$idCompany]);

        return parent::setIdCompany($idCompany);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdCompany', []);

        return parent::getIdCompany();
    }

}
