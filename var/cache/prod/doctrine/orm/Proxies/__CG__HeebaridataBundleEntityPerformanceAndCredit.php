<?php

namespace Proxies\__CG__\Heebari\dataBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class PerformanceAndCredit extends \Heebari\dataBundle\Entity\PerformanceAndCredit implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'idPerformanceCredit', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'dateOfInformation', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'performanceAndCredit', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'returnOnEquity', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'returnOnAsset', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'riskAdjustedReturnOnCapital', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'grossMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'profitMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'ebitdaMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'quickRatio', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'idCompany'];
        }

        return ['__isInitialized__', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'idPerformanceCredit', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'dateOfInformation', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'performanceAndCredit', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'returnOnEquity', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'returnOnAsset', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'riskAdjustedReturnOnCapital', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'grossMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'profitMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'ebitdaMargin', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'quickRatio', '' . "\0" . 'Heebari\\dataBundle\\Entity\\PerformanceAndCredit' . "\0" . 'idCompany'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (PerformanceAndCredit $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdPerformanceCredit()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdPerformanceCredit();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdPerformanceCredit', []);

        return parent::getIdPerformanceCredit();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateOfInformation($dateOfInformation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateOfInformation', [$dateOfInformation]);

        return parent::setDateOfInformation($dateOfInformation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateOfInformation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateOfInformation', []);

        return parent::getDateOfInformation();
    }

    /**
     * {@inheritDoc}
     */
    public function setPerformanceAndCredit($performanceAndCredit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPerformanceAndCredit', [$performanceAndCredit]);

        return parent::setPerformanceAndCredit($performanceAndCredit);
    }

    /**
     * {@inheritDoc}
     */
    public function getPerformanceAndCredit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPerformanceAndCredit', []);

        return parent::getPerformanceAndCredit();
    }

    /**
     * {@inheritDoc}
     */
    public function setReturnOnEquity($returnOnEquity)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReturnOnEquity', [$returnOnEquity]);

        return parent::setReturnOnEquity($returnOnEquity);
    }

    /**
     * {@inheritDoc}
     */
    public function getReturnOnEquity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReturnOnEquity', []);

        return parent::getReturnOnEquity();
    }

    /**
     * {@inheritDoc}
     */
    public function setReturnOnAsset($returnOnAsset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReturnOnAsset', [$returnOnAsset]);

        return parent::setReturnOnAsset($returnOnAsset);
    }

    /**
     * {@inheritDoc}
     */
    public function getReturnOnAsset()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReturnOnAsset', []);

        return parent::getReturnOnAsset();
    }

    /**
     * {@inheritDoc}
     */
    public function setRiskAdjustedReturnOnCapital($riskAdjustedReturnOnCapital)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRiskAdjustedReturnOnCapital', [$riskAdjustedReturnOnCapital]);

        return parent::setRiskAdjustedReturnOnCapital($riskAdjustedReturnOnCapital);
    }

    /**
     * {@inheritDoc}
     */
    public function getRiskAdjustedReturnOnCapital()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRiskAdjustedReturnOnCapital', []);

        return parent::getRiskAdjustedReturnOnCapital();
    }

    /**
     * {@inheritDoc}
     */
    public function setGrossMargin($grossMargin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGrossMargin', [$grossMargin]);

        return parent::setGrossMargin($grossMargin);
    }

    /**
     * {@inheritDoc}
     */
    public function getGrossMargin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGrossMargin', []);

        return parent::getGrossMargin();
    }

    /**
     * {@inheritDoc}
     */
    public function setProfitMargin($profitMargin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProfitMargin', [$profitMargin]);

        return parent::setProfitMargin($profitMargin);
    }

    /**
     * {@inheritDoc}
     */
    public function getProfitMargin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProfitMargin', []);

        return parent::getProfitMargin();
    }

    /**
     * {@inheritDoc}
     */
    public function setEbitdaMargin($ebitdaMargin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEbitdaMargin', [$ebitdaMargin]);

        return parent::setEbitdaMargin($ebitdaMargin);
    }

    /**
     * {@inheritDoc}
     */
    public function getEbitdaMargin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEbitdaMargin', []);

        return parent::getEbitdaMargin();
    }

    /**
     * {@inheritDoc}
     */
    public function setQuickRatio($quickRatio)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setQuickRatio', [$quickRatio]);

        return parent::setQuickRatio($quickRatio);
    }

    /**
     * {@inheritDoc}
     */
    public function getQuickRatio()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getQuickRatio', []);

        return parent::getQuickRatio();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdCompany(\Heebari\dataBundle\Entity\Company $idCompany = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdCompany', [$idCompany]);

        return parent::setIdCompany($idCompany);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdCompany()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdCompany', []);

        return parent::getIdCompany();
    }

}
